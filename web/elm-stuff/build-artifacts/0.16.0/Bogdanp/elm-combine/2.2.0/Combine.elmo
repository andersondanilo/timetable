Elm.Combine = Elm.Combine || {};
Elm.Combine.make = function (_elm) {
   "use strict";
   _elm.Combine = _elm.Combine || {};
   if (_elm.Combine.values) return _elm.Combine.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Lazy = Elm.Lazy.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Regex = Elm.Regex.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var app = function (p) {    var _p0 = p;if (_p0.ctor === "Parser") {    return _p0._0;} else {    return $Lazy.force(_p0._0);}};
   var parse = F2(function (p,input) {    return A2(app,p,{input: input,position: 0});});
   var RecursiveParser = function (a) {    return {ctor: "RecursiveParser",_0: a};};
   var rec = function (t) {    return RecursiveParser($Lazy.lazy(function (_p1) {    var _p2 = _p1;return app(t({ctor: "_Tuple0"}));}));};
   var Parser = function (a) {    return {ctor: "Parser",_0: a};};
   var primitive = Parser;
   var bimap = F3(function (fok,ferr,p) {
      return Parser(function (cx) {
         var _p3 = A2(app,p,cx);
         if (_p3._0.ctor === "Ok") {
               return {ctor: "_Tuple2",_0: $Result.Ok(fok(_p3._0._0)),_1: _p3._1};
            } else {
               return {ctor: "_Tuple2",_0: $Result.Err(ferr(_p3._0._0)),_1: _p3._1};
            }
      });
   });
   var map = F2(function (f,p) {    return A3(bimap,f,$Basics.identity,p);});
   var mapError = bimap($Basics.identity);
   var andThen = F2(function (p,f) {
      return Parser(function (cx) {
         var _p4 = A2(app,p,cx);
         if (_p4._0.ctor === "Ok") {
               return A2(app,f(_p4._0._0),_p4._1);
            } else {
               return {ctor: "_Tuple2",_0: $Result.Err(_p4._0._0),_1: _p4._1};
            }
      });
   });
   var sequence = function (ps) {
      var accumulate = F3(function (acc,ps,cx) {
         accumulate: while (true) {
            var _p5 = ps;
            if (_p5.ctor === "[]") {
                  return {ctor: "_Tuple2",_0: $Result.Ok($List.reverse(acc)),_1: cx};
               } else {
                  var _p6 = A2(app,_p5._0,cx);
                  if (_p6._0.ctor === "Ok") {
                        var _v6 = A2($List._op["::"],_p6._0._0,acc),_v7 = _p5._1,_v8 = _p6._1;
                        acc = _v6;
                        ps = _v7;
                        cx = _v8;
                        continue accumulate;
                     } else {
                        return {ctor: "_Tuple2",_0: $Result.Err(_p6._0._0),_1: _p6._1};
                     }
               }
         }
      });
      return Parser(function (cx) {    return A3(accumulate,_U.list([]),ps,cx);});
   };
   var fail = function (ms) {    return Parser(function (cx) {    return {ctor: "_Tuple2",_0: $Result.Err(ms),_1: cx};});};
   var succeed = function (r) {    return Parser(function (cx) {    return {ctor: "_Tuple2",_0: $Result.Ok(r),_1: cx};});};
   var andMap = F2(function (lp,rp) {    return A2(andThen,lp,function (f) {    return A2(andThen,rp,function (x) {    return succeed(f(x));});});});
   var between = F3(function (lp,rp,p) {
      return A2(andMap,A2(andMap,A2(map,$Basics.flip(function (_p7) {    return $Basics.always($Basics.always(_p7));}),lp),p),rp);
   });
   var skip = function (p) {    return A2(andThen,p,$Basics.always(succeed({ctor: "_Tuple0"})));};
   var count = F2(function (n,p) {
      var accumulate = F2(function (x,acc) {
         return _U.cmp(x,0) < 1 ? succeed($List.reverse(acc)) : A2(andThen,p,function (res) {    return A2(accumulate,x - 1,A2($List._op["::"],res,acc));});
      });
      return A2(accumulate,n,_U.list([]));
   });
   var string = function (s) {
      return Parser(function (cx) {
         if (A2($String.startsWith,s,cx.input)) {
               var len = $String.length(s);
               var rem = A2($String.dropLeft,len,cx.input);
               var pos = cx.position + len;
               return {ctor: "_Tuple2",_0: $Result.Ok(s),_1: _U.update(cx,{input: rem,position: pos})};
            } else return {ctor: "_Tuple2",_0: $Result.Err(_U.list([A2($Basics._op["++"],"expected ",$Basics.toString(s))])),_1: cx};
      });
   };
   var parens = A2(between,string("("),string(")"));
   var braces = A2(between,string("{"),string("}"));
   var brackets = A2(between,string("["),string("]"));
   var regex = function (pattern) {
      var pattern$ = A2($String.startsWith,"^",pattern) ? pattern : A2($Basics._op["++"],"^",pattern);
      return Parser(function (cx) {
         var _p8 = A3($Regex.find,$Regex.AtMost(1),$Regex.regex(pattern$),cx.input);
         if (_p8.ctor === "::" && _p8._1.ctor === "[]") {
               var _p9 = _p8._0;
               var len = $String.length(_p9.match);
               var rem = A2($String.dropLeft,len,cx.input);
               var pos = cx.position + len;
               return {ctor: "_Tuple2",_0: $Result.Ok(_p9.match),_1: _U.update(cx,{input: rem,position: pos})};
            } else {
               return {ctor: "_Tuple2"
                      ,_0: $Result.Err(_U.list([A2($Basics._op["++"],"expected input matching Regexp /",A2($Basics._op["++"],pattern$,"/"))]))
                      ,_1: cx};
            }
      });
   };
   var $while = function (pred) {
      var accumulate = F2(function (acc,cx) {
         accumulate: while (true) {
            var _p10 = $String.uncons(cx.input);
            if (_p10.ctor === "Just") {
                  var _p11 = _p10._0._0;
                  if (pred(_p11)) {
                        var pos = cx.position + 1;
                        var c = A2($String.cons,_p11,"");
                        var _v11 = A2($Basics._op["++"],acc,c),_v12 = _U.update(cx,{input: _p10._0._1,position: pos});
                        acc = _v11;
                        cx = _v12;
                        continue accumulate;
                     } else return {ctor: "_Tuple2",_0: acc,_1: cx};
               } else {
                  return {ctor: "_Tuple2",_0: acc,_1: cx};
               }
         }
      });
      return Parser(function (cx) {
         var _p12 = A2(accumulate,"",cx);
         var res = _p12._0;
         var cx$ = _p12._1;
         return {ctor: "_Tuple2",_0: $Result.Ok(res),_1: cx$};
      });
   };
   var end = Parser(function (cx) {
      return _U.eq(cx.input,"") ? {ctor: "_Tuple2",_0: $Result.Ok({ctor: "_Tuple0"}),_1: cx} : {ctor: "_Tuple2"
                                                                                               ,_0: $Result.Err(_U.list(["expected end of input"]))
                                                                                               ,_1: cx};
   });
   var or = F2(function (lp,rp) {
      return Parser(function (cx) {
         var res = A2(app,lp,cx);
         var _p13 = res;
         if (_p13._0.ctor === "Ok") {
               return res;
            } else {
               var res$ = A2(app,rp,cx);
               var _p14 = res$;
               if (_p14._0.ctor === "Ok") {
                     return res$;
                  } else {
                     return {ctor: "_Tuple2",_0: $Result.Err(A2($Basics._op["++"],_p13._0._0,_p14._0._0)),_1: cx};
                  }
            }
      });
   });
   var choice = function (xs) {    return A3($List.foldr,or,fail(_U.list([])),xs);};
   var optional = F2(function (res,p) {    return A2(or,p,succeed(res));});
   var chainl = F2(function (p,op) {
      var accumulate = function (x) {
         return A2(or,A2(andThen,op,function (f) {    return A2(andThen,p,function (y) {    return accumulate(A2(f,x,y));});}),succeed(x));
      };
      return A2(andThen,p,accumulate);
   });
   var chainr = F2(function (p,op) {
      var accumulate = function (x) {
         return A2(or,A2(andThen,op,function (f) {    return A2(andThen,A2(andThen,p,accumulate),function (y) {    return succeed(A2(f,x,y));});}),succeed(x));
      };
      return A2(andThen,p,accumulate);
   });
   var maybe = function (p) {
      return Parser(function (cx) {
         var _p15 = A2(app,p,cx);
         if (_p15.ctor === "_Tuple2" && _p15._0.ctor === "Ok") {
               return {ctor: "_Tuple2",_0: $Result.Ok($Maybe.Just(_p15._0._0)),_1: _p15._1};
            } else {
               return {ctor: "_Tuple2",_0: $Result.Ok($Maybe.Nothing),_1: cx};
            }
      });
   };
   var many = function (p) {
      var accumulate = F2(function (acc,cx) {
         accumulate: while (true) {
            var _p16 = A2(app,p,cx);
            if (_p16.ctor === "_Tuple2" && _p16._0.ctor === "Ok") {
                  var _p17 = _p16._1;
                  if (_U.eq(cx,_p17)) return {ctor: "_Tuple2",_0: $List.reverse(acc),_1: cx}; else {
                        var _v17 = A2($List._op["::"],_p16._0._0,acc),_v18 = _p17;
                        acc = _v17;
                        cx = _v18;
                        continue accumulate;
                     }
               } else {
                  return {ctor: "_Tuple2",_0: $List.reverse(acc),_1: cx};
               }
         }
      });
      return Parser(function (cx) {
         var _p18 = A2(accumulate,_U.list([]),cx);
         var res = _p18._0;
         var cx$ = _p18._1;
         return {ctor: "_Tuple2",_0: $Result.Ok(res),_1: cx$};
      });
   };
   var many1 = function (p) {    return A2(andMap,A2(map,F2(function (x,y) {    return A2($List._op["::"],x,y);}),p),many(p));};
   var skipMany1 = function (p) {    return A2(andThen,many1(skip(p)),$Basics.always(succeed({ctor: "_Tuple0"})));};
   var sepBy1 = F2(function (sep,p) {
      return A2(andMap,A2(map,F2(function (x,y) {    return A2($List._op["::"],x,y);}),p),many(A2(andMap,A2(map,$Basics.flip($Basics.always),sep),p)));
   });
   var sepBy = F2(function (sep,p) {    return A2(or,A2(sepBy1,sep,p),succeed(_U.list([])));});
   var sepEndBy1 = F2(function (sep,p) {    return A2(andMap,A2(map,$Basics.always,A2(sepBy1,sep,p)),maybe(sep));});
   var sepEndBy = F2(function (sep,p) {    return A2(or,A2(sepEndBy1,sep,p),succeed(_U.list([])));});
   var skipMany = function (p) {    return A2(andThen,many(skip(p)),$Basics.always(succeed({ctor: "_Tuple0"})));};
   var manyTill = F2(function (p,end) {
      var accumulate = F2(function (acc,cx) {
         accumulate: while (true) {
            var _p19 = A2(app,end,cx);
            if (_p19._0.ctor === "Ok") {
                  return {ctor: "_Tuple2",_0: $Result.Ok($List.reverse(acc)),_1: _p19._1};
               } else {
                  var _p20 = A2(app,p,cx);
                  if (_p20.ctor === "_Tuple2" && _p20._0.ctor === "Ok") {
                        var _v21 = A2($List._op["::"],_p20._0._0,acc),_v22 = _p20._1;
                        acc = _v21;
                        cx = _v22;
                        continue accumulate;
                     } else {
                        return {ctor: "_Tuple2",_0: $Result.Err(_p19._0._0),_1: _p19._1};
                     }
               }
         }
      });
      return Parser(accumulate(_U.list([])));
   });
   var Context = F2(function (a,b) {    return {input: a,position: b};});
   return _elm.Combine.values = {_op: _op
                                ,primitive: primitive
                                ,parse: parse
                                ,app: app
                                ,rec: rec
                                ,bimap: bimap
                                ,map: map
                                ,mapError: mapError
                                ,andThen: andThen
                                ,andMap: andMap
                                ,sequence: sequence
                                ,fail: fail
                                ,succeed: succeed
                                ,string: string
                                ,regex: regex
                                ,$while: $while
                                ,end: end
                                ,or: or
                                ,choice: choice
                                ,optional: optional
                                ,maybe: maybe
                                ,many: many
                                ,many1: many1
                                ,manyTill: manyTill
                                ,sepBy: sepBy
                                ,sepBy1: sepBy1
                                ,sepEndBy: sepEndBy
                                ,sepEndBy1: sepEndBy1
                                ,skip: skip
                                ,skipMany: skipMany
                                ,skipMany1: skipMany1
                                ,chainl: chainl
                                ,chainr: chainr
                                ,count: count
                                ,between: between
                                ,parens: parens
                                ,braces: braces
                                ,brackets: brackets
                                ,Context: Context};
};