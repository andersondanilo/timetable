Elm.Timetable = Elm.Timetable || {};
Elm.Timetable.Backend = Elm.Timetable.Backend || {};
Elm.Timetable.Backend.Routes = Elm.Timetable.Backend.Routes || {};
Elm.Timetable.Backend.Routes.make = function (_elm) {
   "use strict";
   _elm.Timetable = _elm.Timetable || {};
   _elm.Timetable.Backend = _elm.Timetable.Backend || {};
   _elm.Timetable.Backend.Routes = _elm.Timetable.Backend.Routes || {};
   if (_elm.Timetable.Backend.Routes.values) return _elm.Timetable.Backend.Routes.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Hop = Elm.Hop.make(_elm),
   $Hop$Matchers = Elm.Hop.Matchers.make(_elm),
   $Hop$Types = Elm.Hop.Types.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Timetable$Backend$Types = Elm.Timetable.Backend.Types.make(_elm);
   var _op = {};
   var matchers = _U.list([A2($Hop$Matchers.match1,$Timetable$Backend$Types.HomeRoute,"")]);
   var routerConfig = {hash: true,basePath: "",matchers: matchers,notFound: $Timetable$Backend$Types.NotFoundRoute};
   var router = $Hop.$new(routerConfig);
   var taggedRouterSignal = A2($Signal.map,$Timetable$Backend$Types.ApplyRoute,router.signal);
   return _elm.Timetable.Backend.Routes.values = {_op: _op,taggedRouterSignal: taggedRouterSignal,matchers: matchers,routerConfig: routerConfig,router: router};
};